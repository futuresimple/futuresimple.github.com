<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://futuresimple.github.com/</id>
  <title>Future Simple Lab</title>
  <updated>2012-04-19T18:00:00Z</updated>
  <link rel="alternate" href="http://futuresimple.github.com/"/>
  <link rel="self" href="http://futuresimple.github.com/rss.xml"/>
  <author>
    <name>Future Simple Lab</name>
    <uri>Future Simple Lab</uri>
  </author>
  <entry>
    <id>tag:futuresimple.github.com,2012-04-19:/posts/2012-04-19-api-bakeoff-summary/</id>
    <title type="html">Baking APIs with Tropo and Future Simple</title>
    <published>2012-04-19T18:00:00Z</published>
    <updated>2012-04-19T18:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-04-19-api-bakeoff-summary/"/>
    <content type="html">&lt;p&gt;The really cool thing about APIs is that they allow you to stitch a solution together pretty quickly - at least the good ones do :)
As it turns out, this is a great idea for hackathons - when you only have a few hours to produce something that you will be able to show to the world. Yesterday’s &lt;a href="http://railsberry.com"&gt;Railsberry&lt;/a&gt; API Bakeoff was sponsored by &lt;a href="http://tropo.com"&gt;Tropo&lt;/a&gt; and &lt;a href="http://futuresimple.com"&gt;Future Simple&lt;/a&gt;. Tropo adds Voice, SMS and IM support to your applications and &lt;a href="http://futuresimple.com/base"&gt;Base&lt;/a&gt; is a CRM system that allows you to track your sales and contacts with ease.&lt;/p&gt;



&lt;iframe frameborder="0" height="337" src="http://www.youtube.com/embed/YdXFfhYQLvQ?rel=0" width="600"&gt;&lt;/iframe&gt;

&lt;p&gt;Everybody was free to work on whatever they wanted but it is these two APIs that attendees abused the most :)
And so &lt;a href="https://github.com/canimus"&gt;canimus&lt;/a&gt; created an app that could retrieve a contact from Base, call that person’s phone number and play her a pre-recorded message. Cano actually used it to call his friend in the US to say ‘Hi’ :)&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/antoniolorusso"&gt;@antoniolorusso&lt;/a&gt;, &lt;a href="http://twitter.com/teoulas"&gt;@teoulas&lt;/a&gt; and &lt;a href="http://twitter.com/ludvik_pl"&gt;@ludvik_pl&lt;/a&gt; from &lt;a href="http://pusher.com"&gt;Pusher&lt;/a&gt; put 3 different APIs together. Their app could create contacts in Base after receiving SMS. Additionally, Pusher’s API would send a push notification to their web app and update it in real time. Now, how cool is that?&lt;/p&gt;

&lt;center&gt;
	&lt;img src="/images/api_bakeoff.jpg"&gt;
&lt;/center&gt;

&lt;p&gt;&lt;a href="http://twitter.com/michalbugno"&gt;@michalbugno&lt;/a&gt; and &lt;a href="http://twitter.com/oinopion"&gt;@oinopion&lt;/a&gt; made it possible to sync Google Spreadsheets with Base while &lt;a href="http://twitter.com/evilchelu"&gt;@evilchelu&lt;/a&gt; and &lt;a href="http://twitter.com/dira_geek_girl"&gt;@dira_geek_girl&lt;/a&gt; worked on a nutrition calculator based on Wolphram Alpha API. &lt;a href="http://twitter.com/eatingbits"&gt;@eatingbits&lt;/a&gt;, &lt;a href="http://twitter.com/peter_lind"&gt;@Peter_Lind&lt;/a&gt; and &lt;a href="http://twitter.com/patrikstenmark"&gt;@PatrikStenmark&lt;/a&gt; created an app that presents tweets about Railsberry on a Google Map and &lt;a href="http://twitter.com/makevoid"&gt;@makevoid&lt;/a&gt;’s project allows you to see where exactly on the map all Facebook events in your city are happening - &lt;a href="http://github.com/makevoid/eventyd"&gt;eventyd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were many more ideas and discussions going on throughout the evening - these just examples of how many cool things can be built in just a few hours. &lt;/p&gt;

&lt;p&gt;Thank you all for coming and coding together. We all had lots of fun :)
Take care and have fun at Railsberry.&lt;/p&gt;

&lt;hr&gt;&lt;p&gt;Update:
Check out &lt;a href="http://www.facebook.com/media/set/?set=a.392037784161751.95804.301521556546708&amp;amp;type=1"&gt;photos&lt;/a&gt; from the event.&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;The really cool thing about APIs is that they allow you to stitch a solution together pretty quickly - at least the good ones do :)
As it turns out, this is a great idea for hackathons - when you only have a few hours to produce something that you will be able to show to the world. Yesterday’s &lt;a href="http://railsberry.com"&gt;Railsberry&lt;/a&gt; API Bakeoff was sponsored by &lt;a href="http://tropo.com"&gt;Tropo&lt;/a&gt; and &lt;a href="http://futuresimple.com"&gt;Future Simple&lt;/a&gt;. Tropo adds Voice, SMS and IM support to your applications and &lt;a href="http://futuresimple.com/base"&gt;Base&lt;/a&gt; is a CRM system that allows you to track your sales and contacts with ease.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-04-18:/posts/2012-04-18-railsberry-api-bakeoff-with-tropo-and-futuresimple/</id>
    <title type="html">RailsBerry API Bakeoff with Tropo and Future Simple</title>
    <published>2012-04-18T11:00:00Z</published>
    <updated>2012-04-18T11:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-04-18-railsberry-api-bakeoff-with-tropo-and-futuresimple/"/>
    <content type="html">&lt;p&gt;With the &lt;a href="http://www.railsberry.com"&gt;RailsBerry&lt;/a&gt; conference right around the
corner, we teamed up with &lt;a href="http://www.tropo.com"&gt;Tropo&lt;/a&gt; and the people behind
the event to organize an API Bakeoff. The event was &lt;a href="http://blog.railsberry.com/index.php/2012/04/15/railsberry-hackathon/"&gt;announced on
Monday&lt;/a&gt;
and almost immediately after the ticket sale started, all the spots were taken.&lt;/p&gt;



&lt;p&gt;So once everyone gets here, we will announce the topics but we would like you
to know what we want to focus on during the hackathon. We want to focus on
building cool stuff using the Tropo and Futuresimple’s Base APIs. Here is some
info to get you started:&lt;/p&gt;

&lt;h2 id="tropo"&gt;Tropo&lt;/h2&gt;
&lt;p&gt;Tropo is a powerful yet simple API that adds Voice, SMS, Twitter, and IM
support to the programming languages we know. With tropo you can call people,
transcript voice, send IMs as well as text messages.&lt;/p&gt;

&lt;p&gt;You can get to know their documentation along with some instructions on their
&lt;a href="https://www.tropo.com/docs/"&gt;Documentation Page&lt;/a&gt;, and once you skim through
those, we have prepared this to get you up and running (&lt;a href="https://gist.github.com/2413019"&gt;gist
link&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&lt;span class="comment"&gt;# In order to connect with Tropo you need to provide your username and password - if you do not&lt;/span&gt;
&lt;span class="comment"&gt;# want to store it in the code you can export it to the environment variables:&lt;/span&gt;

&lt;span class="comment"&gt;# export TROPO_USERNAME=&amp;lt;tropo-username&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;# export TROPO_PASSWORD=&amp;lt;tropo-pass&amp;gt;&lt;/span&gt;


&lt;span class="comment"&gt;# Script you will be running contains of two steps:&lt;/span&gt;

&lt;span class="comment"&gt;# Firstly you can create a tropo application by using  Tropo Provisioning API.&lt;/span&gt;
&lt;span class="comment"&gt;# github repo https://github.com/tropo/tropo-provisioning &lt;/span&gt;
&lt;span class="comment"&gt;# documentation - https://www.tropo.com/docs/rest/rest_tutorials.htm#prov_tutorials&lt;/span&gt;


require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tropo-provisioning&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rest-client&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;# Creates a session like object - once base_uri is not passed - it connects to "http://api.tropo.com/v1/" by default&lt;/span&gt;

tp = &lt;span class="constant"&gt;TropoProvisioning&lt;/span&gt;.new(&lt;span class="predefined-constant"&gt;ENV&lt;/span&gt;[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;TROPO_USERNAME&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;], &lt;span class="predefined-constant"&gt;ENV&lt;/span&gt;[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;TROPO_PASSWORD&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;], &lt;span class="symbol"&gt;:base_uri&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://api.tropo.com/v1/&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="comment"&gt;# =&amp;gt; #&amp;lt;TropoProvisioning:0x007f87498e4d38 @tropo_client=#&amp;lt;TropoClient:0x007f8749acb020 @base_uri="http://api.tropo.com/v1/", @username="kiszal", @password="living.peryton62", @headers={"Content-Type"=&amp;gt;"application/json"}, @proxy=nil, @http=#&amp;lt;Net::HTTP api.tropo.com:80 open=false&amp;gt;&amp;gt;, @user_data=#&amp;lt;Hashie::Mash email="bart+tropo@futuresimple.com" firstName="Bart" href="http://api.tropo.com/v1/users/kiszal" id="138100" joinDate="2012-04-18T11:05:40.507+0000" lastName="Kiszala" marketingOptIn=true phoneNumber="1234567890" status="active" username="kiszal"&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;#creates a new application in Tropo&lt;/span&gt;


app_id = tp.create_application({ &lt;span class="symbol"&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tropo-example-app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
                              &lt;span class="symbol"&gt;:voiceUrl&lt;/span&gt;     =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;http://dl.dropbox.com/u/7486597/coference.rb&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
                              &lt;span class="symbol"&gt;:partition&lt;/span&gt;    =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;staging&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
                              &lt;span class="symbol"&gt;:platform&lt;/span&gt;     =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scripting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; })

&lt;span class="comment"&gt;# =&amp;gt; #&amp;lt;Hashie::Mash application_id="345196" href="http://api.tropo.com/v1/applications/345196"&amp;gt;&lt;/span&gt;


&lt;span class="comment"&gt;# http://dl.dropbox.com/u/7486597/coference.rb - url address for a ruby script userd by the tropo application  - you&lt;/span&gt;
&lt;span class="comment"&gt;# can host the file either in tropo cloud, or whatever other publicly available location - it has to be available&lt;/span&gt;
&lt;span class="comment"&gt;# under HTTP (https is no good - sadly github does not work for storing the scripting file :( )&lt;/span&gt;
&lt;span class="comment"&gt;# The simplest tropo app script can look sth like this (u can see it http://dl.dropbox.com/u/7486597/coference.rb ).&lt;/span&gt;
&lt;span class="comment"&gt;# It creates a conference call.&lt;/span&gt;

say &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Welcome to the conference!&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;
conference &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;1525&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;# Docs for Tropo Scripting API are available =&amp;gt; https://www.tropo.com/docs/scripting/overview.htm&lt;/span&gt;

&lt;span class="comment"&gt;# Now fetch the skype number assigned to the application.&lt;/span&gt;

app_info = tp.addresses(app_id.application_id)

&lt;span class="comment"&gt;# =&amp;gt; [#&amp;lt;Hashie::Mash address="9996193488@sip.tropo.com" application="http://api.tropo.com/v1/applications/345196" href="http://api.tropo.com/v1/applications/345196/addresses/sip/9996193488@sip.tropo.com" type="sip"&amp;gt;, #&amp;lt;Hashie::Mash application="http://api.tropo.com/v1/applications/345196" href="http://api.tropo.com/v1/applications/345196/addresses/skype/+990009369996193488" number="+990009369996193488" type="skype"&amp;gt;]&lt;/span&gt;

skype_number = app_info.select{|e| e.type == &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;skype&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}[&lt;span class="integer"&gt;0&lt;/span&gt;].number


&lt;span class="comment"&gt;# Secondly once you have your application ready and you want to run it programmatically (ex to initiates the call) &lt;/span&gt;
&lt;span class="comment"&gt;# you have to retrieve API token for that application. The only way I managed to get one is by going to tropo application &lt;/span&gt;
&lt;span class="comment"&gt;# (in the web interface) and  generate voice outbound token (I could not find  API access for a token). &lt;/span&gt;
&lt;span class="comment"&gt;# Once you generate one you have to launch it - also in the web interface. &lt;/span&gt;
&lt;span class="comment"&gt;# It takes up to couple of minutes for token to propagate.&lt;/span&gt;

&lt;span class="comment"&gt;# export TROPO_API_TOKEN=&amp;lt;tropo-api-token&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;# After your api token is set up - you are able to run an application assigned to a token:&lt;/span&gt;

response = &lt;span class="constant"&gt;RestClient&lt;/span&gt;.get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;http://api.tropo.com/1.0/sessions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="symbol"&gt;:params&lt;/span&gt; =&amp;gt; {
    &lt;span class="symbol"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;create&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="symbol"&gt;:token&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;ENV&lt;/span&gt;[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;TROPO_API_TOKEN&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
  }
}

&lt;span class="comment"&gt;# Example conference caller application is here - http://blog.tropo.com/2012/02/24/ruby-on-rails-conference-caller/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="base"&gt;Base&lt;/h2&gt;

&lt;p&gt;Base is a powerful CRM solution for small businesses that allows you to track
your sales as well as your contacts. Thousands of people use it everyday to
manage their businesses.&lt;/p&gt;

&lt;p&gt;Base offers a JSON-based API, documentation to which can be found at
&lt;a href="http://dev.futuresimple.com/"&gt;dev.futuresimple.com&lt;/a&gt; page, but it might be
easier to use a Ruby Gem to communicate with the API. You can find the gem &lt;a href="https://github.com/pipejump/pipejump"&gt;on
GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get started with the API using the gem, check this out (also &lt;a href="https://gist.github.com/2401158"&gt;available as a
gist&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&lt;span class="comment"&gt;# gem install pipejump&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rubygems&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;pipejump&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

fs = &lt;span class="constant"&gt;Pipejump&lt;/span&gt;::&lt;span class="constant"&gt;Session&lt;/span&gt;.new(&lt;span class="symbol"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;your.email@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:password&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;your.pass&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# ... if you have authentication token already&lt;/span&gt;
&lt;span class="comment"&gt;# fs = Pipejump::Session.new(:token =&amp;gt; "token")&lt;/span&gt;

&lt;span class="comment"&gt;# show your account info&lt;/span&gt;
account = fs.account

&lt;span class="comment"&gt;# first 40 contacts&lt;/span&gt;
contacts = fs.contacts.all(&lt;span class="symbol"&gt;:per_page&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;40&lt;/span&gt;, &lt;span class="symbol"&gt;:page&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;1&lt;/span&gt;)

&lt;span class="comment"&gt;# create a contact&lt;/span&gt;
contact = fs.contacts.create(&lt;span class="symbol"&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Foo Barsky&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="comment"&gt;# add a note to this contact&lt;/span&gt;
note = contact.notes.create(&lt;span class="symbol"&gt;:content&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;My first note&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="comment"&gt;# show all won deals&lt;/span&gt;
won_deals = fs.deals.all(&lt;span class="symbol"&gt;:stage&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;won&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="comment"&gt;# create a won deal with specifict contact_id set&lt;/span&gt;
deal = fs.deals.create(&lt;span class="symbol"&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;I'm rich!&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:scope&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;120000&lt;/span&gt;, &lt;span class="symbol"&gt;:stage&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;won&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:client_id&lt;/span&gt; =&amp;gt; contact.id)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="so-what-now-"&gt;So what now ?&lt;/h2&gt;

&lt;p&gt;Once you’re set, you can check out one of the topics suggested by us during the
event or let your imagination and creativity lead you and come up with either
some app that integrates Tropo with Base or any of them on their own. Have fun!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;With the &lt;a href="http://www.railsberry.com"&gt;RailsBerry&lt;/a&gt; conference right around the
corner, we teamed up with &lt;a href="http://www.tropo.com"&gt;Tropo&lt;/a&gt; and the people behind
the event to organize an API Bakeoff. The event was &lt;a href="http://blog.railsberry.com/index.php/2012/04/15/railsberry-hackathon/"&gt;announced on
Monday&lt;/a&gt;
and almost immediately after the ticket sale started, all the spots were taken.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-29:/posts/2012-03-29-meetjs-krakow/</id>
    <title type="html">meet.js Kraków</title>
    <published>2012-03-29T18:00:00Z</published>
    <updated>2012-03-29T18:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-29-meetjs-krakow/"/>
    <content type="html">&lt;p&gt;Third meet.js in Kraków is no more! &lt;a href="http://www.futuresimple.com/"&gt;Future
Simple&lt;/a&gt; had a pleasure to be a big part of it. We
sponsored beer, one speaker and few attendees :) But how was it?  Here’re our
impressions.&lt;/p&gt;



&lt;p&gt;Drukarnia is a very nice place for this kind of events. There are drinks, food
and plenty of space available. The only missing thing is Internet downstairs,
Drukarnia should really invest in wi-fi. All started at 6:15 pm when our very
own &lt;a href="https://twitter.com/marcinbunsch"&gt;Marcin Bunsch&lt;/a&gt; took a stage.&lt;/p&gt;

&lt;p&gt;He delivered a presentation about
&lt;a href="http://documentcloud.github.com/backbone/"&gt;Backbone.js&lt;/a&gt; fundamentals, going
through main elements of the framework. He also presented how to make it work
with &lt;a href="http://handlebarsjs.com/"&gt;Handlebars&lt;/a&gt; templating engine. After the
presentation Marcin answered some interesting questions about Backbone. JS
frameworks are hot today and it was very nice to see speech about it, we need
more!&lt;/p&gt;

&lt;p&gt;Next up was &lt;a href="https://twitter.com//krzychukula"&gt;Krzysztof Kula&lt;/a&gt; and he was
talking about testing JS. Personally I liked the talk however I think it had
enough content for a lightning talk but not for a full speech. Krzysztof
mentioned why testing JS is important and how to make it faster using static
test runners like &lt;a href="http://busterjs.org/"&gt;buster.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right after Krzysztof, Grzegorz started his speech about Node.js in a big scale.
Grzegorz works for DreamLab at Onet.pl. He started by describing how Onet
infrastructure looks like. It’s called Onet Cloud and looks like a subset of
Amazon EC2. Then he introduced a concept that made a crowd anxious. All Onet
Cloud production boxes die after 90 minutes. Apparently it’s a design that is
supposed to make infrastructure more bullet-proof but I still don’t know why
after 90 minutes and not after 60 minutes and why to kill them at all! It looks
like a poor-mans implementation of &lt;a href="http://www.codinghorror.com/blog/2011/04/working-with-the-chaos-monkey.html"&gt;Chaos
Monkey&lt;/a&gt;
I didn’t feel that talk answered the question how to scale Node.js and why they
decided to use Node in the first place. “Stateless web apps”? Come on!&lt;/p&gt;

&lt;p&gt;Last talk was delivered by &lt;a href="https://twitter.com/hfrntt"&gt;Sławek&lt;/a&gt; and it concerned
SVG vs Canvas. One could easily see that Sławek had spend a lot of time working
both with Canvas and SVG and he’s the guy you want to talk about this stuff. We
had a chance to see a few demos comparing performance and responsiveness, there
was also nice scaling example done using Firefox logo. Then Sławek talked about
SVG files sizes and concluded with browser support.&lt;/p&gt;

&lt;p&gt;Wrapping up, meet.js #3 was a decent meeting, gathered quite a big crowd and
provoked discussions. See you next time!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Third meet.js in Kraków is no more! &lt;a href="http://www.futuresimple.com/"&gt;Future
Simple&lt;/a&gt; had a pleasure to be a big part of it. We
sponsored beer, one speaker and few attendees :) But how was it?  Here’re our
impressions.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-19:/posts/2012-03-19-the-battle-of-soa-long-term-vision/</id>
    <title type="html"> The battle of SOA - Long term vision</title>
    <published>2012-03-19T14:00:00Z</published>
    <updated>2012-03-19T14:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-19-the-battle-of-soa-long-term-vision/"/>
    <content type="html">&lt;p&gt;Recently there has been a lot of buzz on the Internet about SOA. One of the inspirations for this article was a note by Steve Yegge - Google Platforms Rant, which was accidentally made public - thanks Steve for keeping it this way!&lt;/p&gt;

&lt;p&gt;I try to keep up with all the information, but there is just too much. Sometimes reading more about SOA makes you more confused then educated :). When this happens to me, I try to step back a little bit to get a nice distant view. It’s like with the Golden Gate Bridge. It looks beautiful from the right perspective, but once you start approaching it, the bridge loses its thing - don’t get me wrong it’s still exciting - but different :).&lt;/p&gt;



&lt;p&gt;The actual problem that we are all constantly trying to understand is whether Service Oriented Architecture is the right approach? I think this question can’t be asked without knowing what we want to use it for. What’s the context for that? Unfortunately I see arguments being made without asking that very question whatsoever.&lt;/p&gt;

&lt;p&gt;I believe that if you want to build a very scalable business that will have a huge impact on the market, SOA is the way to go. In this post I’m going to focus mostly on the Long term vision.&lt;/p&gt;

&lt;h2 id="theory"&gt;&lt;strong&gt;Theory&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The fact is that all big systems tend to be highly distributed. Let’s look at the web world: Amazon, Apple, Microsoft, Twitter… Why? It’s much easier to get a grip on such systems both tech and organizational wise. The whole idea is to encapsulate business logic / functionality into smaller, reusable, more manageable parts that are similar to each other. Parts that work in the same manner and obey certain rules of the ecosystem they are in.&lt;/p&gt;

&lt;p&gt;I like to look at SOA from Super String Theory perspective :). Services for me are like small strings. They randomly vibrate - act differently and they interact with each other. Together they create something bigger that they are even not aware of. They can create different things too depending of the mixture of the right strings. It all feels really coherent.&lt;/p&gt;

&lt;p&gt;By the way, we do exactly the same thing in our code. We encapsulate parts of the logic and put it in one place.&lt;/p&gt;

&lt;h2 id="development"&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s focus on development for a while as this is the essential part. Once again, I want to stress the importance of the scale your business wants to achieve. I want to contcentrate on growing as big as it is possible.&lt;/p&gt;

&lt;p&gt;In terms of development speed with SOA, you need to think long term. Short term it’s an investment, though I believe that once you reach a certain point of how big your business is and how fast it grows then you will be able to develop stuff really fast. Why?&lt;/p&gt;

&lt;p&gt;First of all, you are going to be able to build stuff on top of services that are already out there. You don’t repeat yourself along the way. This will save you time in the long run. Obviously you need to design your services in a good way - but that’s the point too. Imaging extracting authentication and authorization into separate services. Once you have it up &amp;amp; running you can easily hook up new services to it without the need of duplicating most of your code in different locations.&lt;/p&gt;

&lt;p&gt;If you organize your development in the right way – teams own services – then it’s pretty easy to understand what everyone is doing and who is responsible for what. It’s easy to identify people who know how to help you. It’s much harder to do that with one codebase, as blaming is not the most efficient way. Often it will point you to a part of the code that was written by a number of people - each line authored by a different person.&lt;/p&gt;

&lt;p&gt;Every part of the system is very similar. You don’t waste time figuring out how a certain thing works, or what’s the best way to get data from this service, or even how to deploy. For instance if teams change ownership of services (which is a good practice), then they already know the new environment.&lt;/p&gt;

&lt;h2 id="design"&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SOA design is a tricky thing. There are certain rules of the architecture itself like isolation of services. Each needs to be designed for failure and they should not duplicate functionality. That’s a pretty easy set of rules. The tricky part, which I’m talking about, is how to design services from the business logic perspective - here there are no firm rules. You need to understand your data and the product you are building. If you get it wrong your road is gonna be really bumpy :). It will really affect development.&lt;/p&gt;

&lt;h2 id="prototyping"&gt;&lt;strong&gt;Prototyping&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;You want to get something out and fast, validate your idea, pivot and so on. SOA doesn’t seem like the best choice for that. Actually Ruby on Rails is great for that. So let’s say you start off with neat prototype built with Rails. So if you want to go big, when is the right time to switch to SOA? Obviously there is no easy answer to that. Let’s look at Twitter. After some time they needed to change the architecture to a more distributed one. Was that good timing? How many resources did they waste on that? Would they waste less if they had started thinking about SOA earlier? Could they start off with SOA?&lt;/p&gt;

&lt;p&gt;There is also the Amazon lesson that we should look at. They did rewrite everything to SOA. They didn’t have a clue that this would have such a huge impact. They created AWS out of it. “You wouldn’t really think that an online bookstore needs to be an extensible, programmable platform. Would you?” (from Steve Yegge’s note) :).&lt;/p&gt;

&lt;p&gt;I believe it’s just a matter of the right tools and accessibility of knowledge. Imagine if there were good tools for SOA development with a prototyping twist? If communities would educate about SOA, so that SOA would be as easy to understand as web application development is?&lt;/p&gt;

&lt;p&gt;I think good tools will soon pop out and people will share even more. That’s the way to go!&lt;/p&gt;

&lt;h2 id="data--interfaces"&gt;&lt;strong&gt;Data &amp;amp; Interfaces&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I think the core of our products is DATA - I can’t stress enough (with capital letters) how important it is to think about the data all the time. Web applications are just interfaces (and they are addressed to users, not other programs) to access that data. I think many people confuse that.&lt;/p&gt;

&lt;p&gt;From our ‘development childhood’ times we learn the craft of building Web Applications. There is one thing that I just can’t get - how did that happen in the web world (even historically I would love to understand it) that in so many tools we coupled interfaces with backend processing and data. We ended up working on client side stuff in the backend - e.g. ruby generating html &amp;amp; javascript on the server side and then just sending it to the client.&lt;/p&gt;

&lt;p&gt;For me it looks like this: we took client side technologies that are meant to build user interfaces, server side technologies, and data; mixed up all of those things in one code base and called it a web application. Interfaces &amp;amp; Data coupled together.&lt;/p&gt;

&lt;p&gt;SOA just makes you focus on data. That’s it. If it could speak it would say that there is data, there are interfaces - for users and application, and there is communication taking place constantly between them. Depending on whether the communication occurs in a browser, phone or within an application, different protocol for communication might be used. I love it, it’s simple and it emphasizes the most important parts drawing a visible line in between them. Period.&lt;/p&gt;

&lt;h2 id="summary"&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So what should be take away from all of that? Actually I love that there’s a lot happening in the tech world around SOA. It means that people care in one sense or another. All in all it makes people think and come up with their own arguments. I think we should remember to think about the most important question: what’s the context for SOA in my case?&lt;/p&gt;

&lt;p&gt;As for me I truly believe that building a huge scalable business requires good organization and SOA is the organization system to stick with.&lt;/p&gt;

&lt;p&gt;I would love to hear you feedback about the Long term SOA in context building very big businesses. Short Term &amp;amp; Transition time article is coming up next. Stay Tuned!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://plus.google.com/112678702228711889851/posts/eVeouesvaVX"&gt;Steve Yegge - Google Platforms Rant&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content>
    <summary type="html">&lt;p&gt;Recently there has been a lot of buzz on the Internet about SOA. One of the inspirations for this article was a note by Steve Yegge - Google Platforms Rant, which was accidentally made public - thanks Steve for keeping it this way!&lt;/p&gt;

&lt;p&gt;I try to keep up with all the information, but there is just too much. Sometimes reading more about SOA makes you more confused then educated :). When this happens to me, I try to step back a little bit to get a nice distant view. It’s like with the Golden Gate Bridge. It looks beautiful from the right perspective, but once you start approaching it, the bridge loses its thing - don’t get me wrong it’s still exciting - but different :).&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-16:/posts/2012-03-16-is-it-time-to-fold-on-ios4-and-go-all-in-on-ios5/</id>
    <title type="html">Is it time to fold on iOS4 and go all-in on iOS5?</title>
    <published>2012-03-16T11:00:00Z</published>
    <updated>2012-03-16T11:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-16-is-it-time-to-fold-on-ios4-and-go-all-in-on-ios5/"/>
    <content type="html">&lt;p&gt;Most iOS developers occasionally ask themselves whether it’s time to ditch iOS(n-1) and only support the latest and greatest iOS(n). This seems to be a common dilemma since Apple releases on average one major version of its mobile operating system per year.&lt;/p&gt;



&lt;h3 id="why-would-you-want-to-stop-supporting-old-ios-versions-anyway"&gt;Why would you want to stop supporting old iOS versions anyway?&lt;/h3&gt;

&lt;p&gt;First of all - new language features: &lt;a href="https://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/00_Introduction.html"&gt;&lt;em&gt;blocks&lt;/em&gt;&lt;/a&gt; in iOS4 or &lt;a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html"&gt;&lt;em&gt;Automatic Reference Counting&lt;/em&gt;&lt;/a&gt; in iOS5 (ARC works under iOS4 but it’s crippled there). Objective-C evolves rapidly, but sometimes a new runtime is required to utilize its the latest features.&lt;/p&gt;

&lt;p&gt;Next up, new and updated APIs. Here are some cherry picks from iOS5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;iCloud&lt;/em&gt; - a huge thing, but do you have any apps on your phone that actually utilize it (except for Apple’s apps)? Probably not, or not many, that’s because it would be difficult (if not impossible in some cases) to support iOS4 and still build an app on top of the iCloud service.&lt;/li&gt;
  &lt;li&gt;
&lt;em&gt;Core Image&lt;/em&gt; - a great framework known from OS X, did you know that you can do &lt;a href="http://maniacdev.com/2011/11/tutorial-easy-face-detection-with-core-image-in-ios-5/"&gt;face recognition&lt;/a&gt; with it? Great! Now do you want to enable it for iOS5 users only and make the iOS4 users suffer?&lt;/li&gt;
  &lt;li&gt;then there are many improvements like a clean way to move a row in &lt;code&gt;UITableView&lt;/code&gt; in iOS5 with &lt;code&gt;-moveRowAtIndexPath:toIndexPath:&lt;/code&gt; (under iOS4 you would have to first remove and than add a row - more code and worse animation)&lt;/li&gt;
  &lt;li&gt;also, there are seemingly small things that actually matter &lt;em&gt;a lot&lt;/em&gt;, ex.: &lt;code&gt;-addChildViewController:&lt;/code&gt; found in &lt;code&gt;UIViewController&lt;/code&gt;. It enables &lt;a href="https://developer.apple.com/videos/wwdc/2011/?id=102"&gt;UIViewController containment&lt;/a&gt; and finally cuts the need to &lt;a href="http://blog.carbonfive.com/2011/03/09/abusing-uiviewcontrollers/"&gt;abuse iOS view controllers&lt;/a&gt;. This is most useful on iPad, where the screen is big and it really makes sense to use multiple view controllers at once, but on the iPhone it also can be very handy. (Just look at the new Path/Facebook/Sparrow &lt;a href="https://github.com/edgecase/ECSlidingViewController"&gt;slide navigation interfaces&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Obviously the list could go on and on, but my conclusion is that using the new/improved stuff will save you time (both during development and later during maintenance) and make your apps better. On the other hand, supporting an old version of iOS and utilizing the new APIs at the same time is troublesome. Especially if you’re trying to replicate the new API features under the old system version. I’m not saying you shouldn’t do it, it’s a noble thing to do, I do it (sometimes :), but maybe it’s just high time to stop doing it for iOS4?&lt;/p&gt;

&lt;h3 id="what-you-should-consider"&gt;What you should consider&lt;/h3&gt;

&lt;h4 id="your-time"&gt;Your time&lt;/h4&gt;

&lt;p&gt;Do you want to slave yourself to death by maintaining multiple sets of code that let you use the newest and greatest features while not breaking your app for users on old devices? Such an approach produces more less maintainable and more bug prone code. &lt;/p&gt;

&lt;h4 id="your-apps-statistics"&gt;Your app’s statistics&lt;/h4&gt;

&lt;p&gt;You should always look at your user-base and check &lt;a href="http://code.google.com/apis/analytics/docs/mobile/ios.html"&gt;how many iOS(n-1) users you have&lt;/a&gt;. It might be different than the market average. There is no good answer to what percentage is low enough to ditch an old iOS version. The big issue here: App Store keeps only the newest version of your app. Once an iOS(n-1) user removes your app after you go iOS(n)-only than he will not be able to reinstall. (Even if it’s a paid app!)&lt;/p&gt;

&lt;h4 id="global-adoption-rate"&gt;Global adoption rate&lt;/h4&gt;

&lt;p&gt;One of the great things about the iOS platform is that it has a very high adoption rate for new system versions, especially with Over The Air updates introduced in iOS5. Apple gives us about one new major iOS version per year. The infamous App Store review process can easily take up to two weeks, add to that another two weeks of delay in your development process (or more ;) and suddenly the statistics that you were trying to base your decision on are at least one month old! Well, like &lt;a href="http://en.wikipedia.org/wiki/Emmett_Brown"&gt;Emmet “Doc” Brown&lt;/a&gt; used to say… “You’ve got to think in four dimensions!”. I recently came across &lt;a href="http://pxldot.com/post/18754186750/ios-ebb-and-flow"&gt;a great article&lt;/a&gt; that will help you to estimate what the adoption rate could be in a few weeks. &lt;/p&gt;

&lt;h4 id="how-many-people-are-you-going-to-abandon"&gt;How many people are you going to abandon?&lt;/h4&gt;

&lt;p&gt;At the end of the day, the way I look at it, is how many users will be left with nothing if my app will go iOS(n)-only. These would be the users who are unable to upgrade to iOS(n) because of hardware limitations, for iOS5 it doesn’t seem to be a big number. Here’s why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all iPads can run iOS5,&lt;/li&gt;
  &lt;li&gt;iPhones above 3G can run it,&lt;/li&gt;
  &lt;li&gt;and finally iPods above 2nd generation will handle it as well.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The system upgrade is free and painless, unless one have a jailbroken device, which nowadays is a popular tool of software piracy on iOS (thus developers shouldn’t care much about jailbroken devices). From my point of view the only problem here is that dropping support for old devices that can’t be upgraded to iOS5, might mean that they will end up in garbage (or hopefully rather at recycling centers). The key device here is iPhone 3G, which can’t run iOS5 and runs iOS4 slowly, but it’s almost 4 years old now and in the smartphone world it’s a long time, so it’s pretty much just dead anyway. Don’t get me wrong, I really care about the natural environment and would love to see Apple supporting its devices longer (without compromising on new features of course ;).&lt;/p&gt;

&lt;h3 id="the-final-message"&gt;The final message&lt;/h3&gt;

&lt;p&gt;It’s always a difficult decision whether it’s time to drop support for old hardware/software, but I think it’s high time to ditch iOS4! Lately, I wanted to install &lt;a href="https://www.mint.com/"&gt;Mint’s&lt;/a&gt; app on my iPad, and it turned out I had to update to iOS5 first, so I did. Gladly and finally! Also, it didn’t hurt ;) These guys (Mint devs) pushed me into doing it and I’m really grateful for that - iCloud synchronization works great on iPad which I didn’t use to sync much before! Fellow developers, let’s push the ecosystem forward and focus on innovation over legacy code!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Most iOS developers occasionally ask themselves whether it’s time to ditch iOS(n-1) and only support the latest and greatest iOS(n). This seems to be a common dilemma since Apple releases on average one major version of its mobile operating system per year.&lt;/p&gt;

</summary>
  </entry>
</feed>
