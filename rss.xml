<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://futuresimple.github.com/</id>
  <title>Future Simple Lab</title>
  <updated>2012-03-19T14:00:00Z</updated>
  <link rel="alternate" href="http://futuresimple.github.com/"/>
  <link rel="self" href="http://futuresimple.github.com/rss.xml"/>
  <author>
    <name>Future Simple Lab</name>
    <uri>Future Simple Lab</uri>
  </author>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-19:/posts/2012-03-19-the-battle-of-soa-long-term-vision/</id>
    <title type="html"> The battle of SOA - Long term vision</title>
    <published>2012-03-19T14:00:00Z</published>
    <updated>2012-03-19T14:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-19-the-battle-of-soa-long-term-vision/"/>
    <content type="html">&lt;p&gt;Recently there has been a lot of buzz on the Internet about SOA. One of the inspirations for this article was a note by Steve Yegge - Google Platforms Rant, which was accidentally made public - thanks Steve for keeping it this way!&lt;/p&gt;

&lt;p&gt;I try to keep up with all the information, but there is just too much. Sometimes reading more about SOA makes you more confused then educated :). When this happens to me, I try to step back a little bit to get a nice distant view. It’s like with the Golden Gate Bridge. It looks beautiful from the right perspective, but once you start approaching it, the bridge loses its thing - don’t get me wrong it’s still exciting - but different :).&lt;/p&gt;



&lt;p&gt;The actual problem that we are all constantly trying to understand is whether Service Oriented Architecture is the right approach? I think this question can’t be asked without knowing what we want to use it for. What’s the context for that? Unfortunately I see arguments being made without asking that very question whatsoever.&lt;/p&gt;

&lt;p&gt;I believe that if you want to build a very scalable business that will have a huge impact on the market, SOA is the way to go. In this post I’m going to focus mostly on the Long term vision.&lt;/p&gt;

&lt;h2 id="theory"&gt;&lt;strong&gt;Theory&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The fact is that all big systems tend to be highly distributed. Let’s look at the web world: Amazon, Apple, Microsoft, Twitter… Why? It’s much easier to get a grip on such systems both tech and organizational wise. The whole idea is to encapsulate business logic / functionality into smaller, reusable, more manageable parts that are similar to each other. Parts that work in the same manner and obey certain rules of the ecosystem they are in.&lt;/p&gt;

&lt;p&gt;I like to look at SOA from Super String Theory perspective :). Services for me are like small strings. They randomly vibrate - act differently and they interact with each other. Together they create something bigger that they are even not aware of. They can create different things too depending of the mixture of the right strings. It all feels really coherent.&lt;/p&gt;

&lt;p&gt;By the way, we do exactly the same thing in our code. We encapsulate parts of the logic and put it in one place.&lt;/p&gt;

&lt;h2 id="development"&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s focus on development for a while as this is the essential part. Once again, I want to stress the importance of the scale your business wants to achieve. I want to contcentrate on growing as big as it is possible.&lt;/p&gt;

&lt;p&gt;In terms of development speed with SOA, you need to think long term. Short term it’s an investment, though I believe that once you reach a certain point of how big your business is and how fast it grows then you will be able to develop stuff really fast. Why?&lt;/p&gt;

&lt;p&gt;First of all, you are going to be able to build stuff on top of services that are already out there. You don’t repeat yourself along the way. This will save you time in the long run. Obviously you need to design your services in a good way - but that’s the point too. Imaging extracting authentication and authorization into separate services. Once you have it up &amp;amp; running you can easily hook up new services to it without the need of duplicating most of your code in different locations.&lt;/p&gt;

&lt;p&gt;If you organize your development in the right way – teams own services – then it’s pretty easy to understand what everyone is doing and who is responsible for what. It’s easy to identify people who know how to help you. It’s much harder to do that with one codebase, as blaming is not the most efficient way. Often it will point you to a part of the code that was written by a number of people - each line authored by a different person.&lt;/p&gt;

&lt;p&gt;Every part of the system is very similar. You don’t waste time figuring out how a certain thing works, or what’s the best way to get data from this service, or even how to deploy. For instance if teams change ownership of services (which is a good practice), then they already know the new environment.&lt;/p&gt;

&lt;h2 id="design"&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SOA design is a tricky thing. There are certain rules of the architecture itself like isolation of services. Each needs to be designed for failure and they should not duplicate functionality. That’s a pretty easy set of rules. The tricky part, which I’m talking about, is how to design services from the business logic perspective - here there are no firm rules. You need to understand your data and the product you are building. If you get it wrong your road is gonna be really bumpy :). It will really affect development.&lt;/p&gt;

&lt;h2 id="prototyping"&gt;&lt;strong&gt;Prototyping&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;You want to get something out and fast, validate your idea, pivot and so on. SOA doesn’t seem like the best choice for that. Actually Ruby on Rails is great for that. So let’s say you start off with neat prototype built with Rails. So if you want to go big, when is the right time to switch to SOA? Obviously there is no easy answer to that. Let’s look at Twitter. After some time they needed to change the architecture to a more distributed one. Was that good timing? How many resources did they waste on that? Would they waste less if they had started thinking about SOA earlier? Could they start off with SOA?&lt;/p&gt;

&lt;p&gt;There is also the Amazon lesson that we should look at. They did rewrite everything to SOA. They didn’t have a clue that this would have such a huge impact. They created AWS out of it. “You wouldn’t really think that an online bookstore needs to be an extensible, programmable platform. Would you?” (from Steve Yegge’s note) :).&lt;/p&gt;

&lt;p&gt;I believe it’s just a matter of the right tools and accessibility of knowledge. Imagine if there were good tools for SOA development with a prototyping twist? If communities would educate about SOA, so that SOA would be as easy to understand as web application development is?&lt;/p&gt;

&lt;p&gt;I think good tools will soon pop out and people will share even more. That’s the way to go!&lt;/p&gt;

&lt;h2 id="data--interfaces"&gt;&lt;strong&gt;Data &amp;amp; Interfaces&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I think the core of our products is DATA - I can’t stress enough (with capital letters) how important it is to think about the data all the time. Web applications are just interfaces (and they are addressed to users, not other programs) to access that data. I think many people confuse that.&lt;/p&gt;

&lt;p&gt;From our ‘development childhood’ times we learn the craft of building Web Applications. There is one thing that I just can’t get - how did that happen in the web world (even historically I would love to understand it) that in so many tools we coupled interfaces with backend processing and data. We ended up working on client side stuff in the backend - e.g. ruby generating html &amp;amp; javascript on the server side and then just sending it to the client.&lt;/p&gt;

&lt;p&gt;For me it looks like this: we took client side technologies that are meant to build user interfaces, server side technologies, and data; mixed up all of those things in one code base and called it a web application. Interfaces &amp;amp; Data coupled together.&lt;/p&gt;

&lt;p&gt;SOA just makes you focus on data. That’s it. If it could speak it would say that there is data, there are interfaces - for users and application, and there is communication taking place constantly between them. Depending on whether the communication occurs in a browser, phone or within an application, different protocol for communication might be used. I love it, it’s simple and it emphasizes the most important parts drawing a visible line in between them. Period.&lt;/p&gt;

&lt;h2 id="summary"&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So what should be take away from all of that? Actually I love that there’s a lot happening in the tech world around SOA. It means that people care in one sense or another. All in all it makes people think and come up with their own arguments. I think we should remember to think about the most important question: what’s the context for SOA in my case?&lt;/p&gt;

&lt;p&gt;As for me I truly believe that building a huge scalable business requires good organization and SOA is the organization system to stick with.&lt;/p&gt;

&lt;p&gt;I would love to hear you feedback about the Long term SOA in context building very big businesses. Short Term &amp;amp; Transition time article is coming up next. Stay Tuned!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://plus.google.com/112678702228711889851/posts/eVeouesvaVX"&gt;Steve Yegge - Google Platforms Rant&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content>
    <summary type="html">&lt;p&gt;Recently there has been a lot of buzz on the Internet about SOA. One of the inspirations for this article was a note by Steve Yegge - Google Platforms Rant, which was accidentally made public - thanks Steve for keeping it this way!&lt;/p&gt;

&lt;p&gt;I try to keep up with all the information, but there is just too much. Sometimes reading more about SOA makes you more confused then educated :). When this happens to me, I try to step back a little bit to get a nice distant view. It’s like with the Golden Gate Bridge. It looks beautiful from the right perspective, but once you start approaching it, the bridge loses its thing - don’t get me wrong it’s still exciting - but different :).&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-16:/posts/2012-03-16-is-it-time-to-fold-on-ios4-and-go-all-in-on-ios5/</id>
    <title type="html">Is it time to fold on iOS4 and go all-in on iOS5?</title>
    <published>2012-03-16T11:00:00Z</published>
    <updated>2012-03-16T11:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-16-is-it-time-to-fold-on-ios4-and-go-all-in-on-ios5/"/>
    <content type="html">&lt;p&gt;Most iOS developers occasionally ask themselves whether it’s time to ditch iOS(n-1) and only support the latest and greatest iOS(n). This seems to be a common dilemma since Apple releases on average one major version of its mobile operating system per year.&lt;/p&gt;



&lt;h3 id="why-would-you-want-to-stop-supporting-old-ios-versions-anyway"&gt;Why would you want to stop supporting old iOS versions anyway?&lt;/h3&gt;

&lt;p&gt;First of all - new language features: &lt;a href="https://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/00_Introduction.html"&gt;&lt;em&gt;blocks&lt;/em&gt;&lt;/a&gt; in iOS4 or &lt;a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html"&gt;&lt;em&gt;Automatic Reference Counting&lt;/em&gt;&lt;/a&gt; in iOS5 (ARC works under iOS4 but it’s crippled there). Objective-C evolves rapidly, but sometimes a new runtime is required to utilize its the latest features.&lt;/p&gt;

&lt;p&gt;Next up, new and updated APIs. Here are some cherry picks from iOS5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;iCloud&lt;/em&gt; - a huge thing, but do you have any apps on your phone that actually utilize it (except for Apple’s apps)? Probably not, or not many, that’s because it would be difficult (if not impossible in some cases) to support iOS4 and still build an app on top of the iCloud service.&lt;/li&gt;
  &lt;li&gt;
&lt;em&gt;Core Image&lt;/em&gt; - a great framework known from OS X, did you know that you can do &lt;a href="http://maniacdev.com/2011/11/tutorial-easy-face-detection-with-core-image-in-ios-5/"&gt;face recognition&lt;/a&gt; with it? Great! Now do you want to enable it for iOS5 users only and make the iOS4 users suffer?&lt;/li&gt;
  &lt;li&gt;then there are many improvements like a clean way to move a row in &lt;code&gt;UITableView&lt;/code&gt; in iOS5 with &lt;code&gt;-moveRowAtIndexPath:toIndexPath:&lt;/code&gt; (under iOS4 you would have to first remove and than add a row - more code and worse animation)&lt;/li&gt;
  &lt;li&gt;also, there are seemingly small things that actually matter &lt;em&gt;a lot&lt;/em&gt;, ex.: &lt;code&gt;-addChildViewController:&lt;/code&gt; found in &lt;code&gt;UIViewController&lt;/code&gt;. It enables &lt;a href="https://developer.apple.com/videos/wwdc/2011/?id=102"&gt;UIViewController containment&lt;/a&gt; and finally cuts the need to &lt;a href="http://blog.carbonfive.com/2011/03/09/abusing-uiviewcontrollers/"&gt;abuse iOS view controllers&lt;/a&gt;. This is most useful on iPad, where the screen is big and it really makes sense to use multiple view controllers at once, but on the iPhone it also can be very handy. (Just look at the new Path/Facebook/Sparrow &lt;a href="https://github.com/edgecase/ECSlidingViewController"&gt;slide navigation interfaces&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Obviously the list could go on and on, but my conclusion is that using the new/improved stuff will save you time (both during development and later during maintenance) and make your apps better. On the other hand, supporting an old version of iOS and utilizing the new APIs at the same time is troublesome. Especially if you’re trying to replicate the new API features under the old system version. I’m not saying you shouldn’t do it, it’s a noble thing to do, I do it (sometimes :), but maybe it’s just high time to stop doing it for iOS4?&lt;/p&gt;

&lt;h3 id="what-you-should-consider"&gt;What you should consider&lt;/h3&gt;

&lt;h4 id="your-time"&gt;Your time&lt;/h4&gt;

&lt;p&gt;Do you want to slave yourself to death by maintaining multiple sets of code that let you use the newest and greatest features while not breaking your app for users on old devices? Such an approach produces more less maintainable and more bug prone code. &lt;/p&gt;

&lt;h4 id="your-apps-statistics"&gt;Your app’s statistics&lt;/h4&gt;

&lt;p&gt;You should always look at your user-base and check &lt;a href="http://code.google.com/apis/analytics/docs/mobile/ios.html"&gt;how many iOS(n-1) users you have&lt;/a&gt;. It might be different than the market average. There is no good answer to what percentage is low enough to ditch an old iOS version. The big issue here: App Store keeps only the newest version of your app. Once an iOS(n-1) user removes your app after you go iOS(n)-only than he will not be able to reinstall. (Even if it’s a paid app!)&lt;/p&gt;

&lt;h4 id="global-adoption-rate"&gt;Global adoption rate&lt;/h4&gt;

&lt;p&gt;One of the great things about the iOS platform is that it has a very high adoption rate for new system versions, especially with Over The Air updates introduced in iOS5. Apple gives us about one new major iOS version per year. The infamous App Store review process can easily take up to two weeks, add to that another two weeks of delay in your development process (or more ;) and suddenly the statistics that you were trying to base your decision on are at least one month old! Well, like &lt;a href="http://en.wikipedia.org/wiki/Emmett_Brown"&gt;Emmet “Doc” Brown&lt;/a&gt; used to say… “You’ve got to think in four dimensions!”. I recently came across &lt;a href="http://pxldot.com/post/18754186750/ios-ebb-and-flow"&gt;a great article&lt;/a&gt; that will help you to estimate what the adoption rate could be in a few weeks. &lt;/p&gt;

&lt;h4 id="how-many-people-are-you-going-to-abandon"&gt;How many people are you going to abandon?&lt;/h4&gt;

&lt;p&gt;At the end of the day, the way I look at it, is how many users will be left with nothing if my app will go iOS(n)-only. These would be the users who are unable to upgrade to iOS(n) because of hardware limitations, for iOS5 it doesn’t seem to be a big number. Here’s why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all iPads can run iOS5,&lt;/li&gt;
  &lt;li&gt;iPhones above 3G can run it,&lt;/li&gt;
  &lt;li&gt;and finally iPods above 2nd generation will handle it as well.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The system upgrade is free and painless, unless one have a jailbroken device, which nowadays is a popular tool of software piracy on iOS (thus developers shouldn’t care much about jailbroken devices). From my point of view the only problem here is that dropping support for old devices that can’t be upgraded to iOS5, might mean that they will end up in garbage (or hopefully rather at recycling centers). The key device here is iPhone 3G, which can’t run iOS5 and runs iOS4 slowly, but it’s almost 4 years old now and in the smartphone world it’s a long time, so it’s pretty much just dead anyway. Don’t get me wrong, I really care about the natural environment and would love to see Apple supporting its devices longer (without compromising on new features of course ;).&lt;/p&gt;

&lt;h3 id="the-final-message"&gt;The final message&lt;/h3&gt;

&lt;p&gt;It’s always a difficult decision whether it’s time to drop support for old hardware/software, but I think it’s high time to ditch iOS4! Lately, I wanted to install &lt;a href="https://www.mint.com/"&gt;Mint’s&lt;/a&gt; app on my iPad, and it turned out I had to update to iOS5 first, so I did. Gladly and finally! Also, it didn’t hurt ;) These guys (Mint devs) pushed me into doing it and I’m really grateful for that - iCloud synchronization works great on iPad which I didn’t use to sync much before! Fellow developers, let’s push the ecosystem forward and focus on innovation over legacy code!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Most iOS developers occasionally ask themselves whether it’s time to ditch iOS(n-1) and only support the latest and greatest iOS(n). This seems to be a common dilemma since Apple releases on average one major version of its mobile operating system per year.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-12:/posts/2012-03-12-wroclove-rb-conference/</id>
    <title type="html">The wroc_love.rb Conference</title>
    <published>2012-03-12T17:00:00Z</published>
    <updated>2012-03-12T17:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-12-wroclove-rb-conference/"/>
    <content type="html">&lt;p&gt;During this weekend a part of the Futuresimple team
(&lt;a href="http://twitter.com/marcinbunsch"&gt;Marcin&lt;/a&gt;,
&lt;a href="http://twitter.com/michalbugno"&gt;Michal&lt;/a&gt;,
&lt;a href="http://twitter.com/powczarek"&gt;Przemek&lt;/a&gt;, and
&lt;a href="http://twitter.com/antekpiechnik"&gt;me&lt;/a&gt;) went to Wrocław to attend
&lt;a href="http://wrocloverb.com"&gt;wroc_love.rb&lt;/a&gt; - a Ruby conference organised by
the &lt;a href="http://www.drug.org.pl"&gt;Lower Silesian Ruby User Group&lt;/a&gt;. We’d like
to share our experiences.&lt;/p&gt;



&lt;p&gt;We left Kraków on Friday evening and arrived just in time for the before
party.  We met some amazing developers, i.e. &lt;a href="http://twitter.com/apotonick"&gt;Nick
Sutterer&lt;/a&gt;, &lt;a href="http://twitter.com/steveklabnik"&gt;Steve
Klabnik&lt;/a&gt;. After a few beers we went
home to get ready for the first day of the conference.&lt;/p&gt;

&lt;center&gt;
  &lt;img src="/images/wroclaw.png"&gt;&lt;br&gt;&lt;span class="note"&gt;Wrocław - by &lt;a href="http://twitter.com/amylg"&gt;amylg&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;

&lt;p&gt;On Saturday Nick Sutterer gave a relaxed talk about respect in the open
source community. Of all the talks we were especially interested in one
by &lt;a href="http://twitter.com/drogus"&gt;Piotr Sarnacki&lt;/a&gt; about the &lt;a href="http://rails-present-past-future.heroku.com/#1"&gt;past, present
and the future of the Ruby on Rails
framework&lt;/a&gt;. Being a core
contributor, he provided the attendees with some great in-depth info on
the framework’s recent history, its current development status and
features that gained much attention lately, i.e. building API-based
applications in Rails. Another &lt;a href="http://decoupling-wrocloverb-2012.heroku.com/"&gt;great
talk&lt;/a&gt; was delivered by
&lt;a href="http://twitter.com/chastell"&gt;Piotr Szotkowski&lt;/a&gt; and dealt with methods
of decoupling persistence from models in Ruby apps. The presentation was
quite detailed and technical, but Piotr managed to cover a lot of
different aspects while keeping us extremely gripped. By the end of the
day we attended a talk on Data Context Integration approach by &lt;a href="http://twitter.com/saturnflyer"&gt;Jim
Gay&lt;/a&gt;. We got really intrigued and as
soon as we get a chance, we’ll consider adopting.&lt;/p&gt;

&lt;center&gt;
  &lt;img src="/images/roy_talk.jpg"&gt;&lt;br&gt;&lt;span class="note"&gt;Roy Tomeij enjoying a picture by Bob Ross during his talk&lt;/span&gt;
&lt;/center&gt;

&lt;p&gt;The next day we woke up to a talk on improving yourself as a programmer
by &lt;a href="http://twitter.com/mehowte"&gt;Michał Taszycki&lt;/a&gt;. We encourage you to
skim through his
&lt;a href="http://speakerdeck.com/u/mehowte/p/programming-workout"&gt;slides&lt;/a&gt; and
register yourself at &lt;a href="http://programmingworkout.com"&gt;Programming
Workout&lt;/a&gt;. Another great talk was
delivered by &lt;a href="http://twitter.com/steveklabnik"&gt;Steve Klabnik&lt;/a&gt; and
covered creating REST Hypermedia APIs. Even though we are not planning
on employing that anytime soon, it was great to see someone tackle and
present the problem. Next up, &lt;a href="http://twitter.com/roy"&gt;Roy Tomeij&lt;/a&gt; gave
a &lt;a href="http://roy.io/wl12"&gt;talk&lt;/a&gt; about Modular, Reusable Frontend Code and
Bob Ross. We have to admit we loved all the tips and ideas. Ideally,
we’ll want to take it on in both our current and upcoming projects.
This talk was followed by a panel discussing &lt;em&gt;Rails vs OOP&lt;/em&gt;, led by
&lt;a href="http://twitter.com/andrzejkrzywda"&gt;Andrzej Krzywda&lt;/a&gt; and consisting of
Piotr Szotkowski, Steve Klabnik, Nick Sutterer and Jim Gay. It was an
extremely interesting discussion that even involved the audience
multiple times.&lt;/p&gt;

&lt;p&gt;To sum up, it’s been a great few days, we are really happy to have been
a part of it and would love to attend it in the future.  It’s amazing to
see new programming-related events taking place here in Poland. Once again
we’d like to thank the organizers of the conference. Great job!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;During this weekend a part of the Futuresimple team
(&lt;a href="http://twitter.com/marcinbunsch"&gt;Marcin&lt;/a&gt;,
&lt;a href="http://twitter.com/michalbugno"&gt;Michal&lt;/a&gt;,
&lt;a href="http://twitter.com/powczarek"&gt;Przemek&lt;/a&gt;, and
&lt;a href="http://twitter.com/antekpiechnik"&gt;me&lt;/a&gt;) went to Wrocław to attend
&lt;a href="http://wrocloverb.com"&gt;wroc_love.rb&lt;/a&gt; - a Ruby conference organised by
the &lt;a href="http://www.drug.org.pl"&gt;Lower Silesian Ruby User Group&lt;/a&gt;. We’d like
to share our experiences.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-03-04:/posts/2012-03-04-csrf-attack/</id>
    <title type="html">CSRF Attack using JavaScript</title>
    <published>2012-03-04T17:00:00Z</published>
    <updated>2012-03-04T17:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-03-04-csrf-attack/"/>
    <content type="html">&lt;p&gt;Most of you are aware of the &lt;a href="http://pl.wikipedia.org/wiki/Cross-site_request_forgery"&gt;CSRF attack&lt;/a&gt;. I use JS on a daily basis but I actually never thought that the code I develop could be CSRF-prone.&lt;/p&gt;

&lt;p&gt;You saw that coming -  I was wrong and I want to share that harsh lesson.&lt;/p&gt;

&lt;p&gt;Let’s assume you’re developing a web app called omg-app.com (obviously because it’s so good it will make everyone say OMG!). The app is getting bigger, lots of people use it, new features are being added on a weekly basis. At some point you conclude it would be nice to inform users about some recently added features.&lt;/p&gt;



&lt;p&gt;How do you do that? The most common solution would be to display a banner for users who logged in describing the newly released stuff.&lt;/p&gt;

&lt;p&gt;Banner can be saying sth like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello bart@futuresimple.com! Great news - new file upload has just been released!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the code that will embed the banner is coming from a separate application - the banner app. A great, asynchronous way is to make the omg-app embed a javascript file, so that the banner app can inject the banner into the page.&lt;/p&gt;

&lt;p&gt;It’s simple and designed for failure. If it doesn’t load, nothing bad happens and it is easy to embed in other future applications.&lt;/p&gt;

&lt;p&gt;The embed will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;text/javascript&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;/banner.js&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the banner app will respond to /banner.js with rendering of javascript code prepopulated with appropriate content, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;&lt;span class="comment"&gt;// This is how banner.js.erb looks like inside&lt;/span&gt;
&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).append(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;div class='banner'/&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.banner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).html(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello &amp;lt;%= current_user.email %&amp;gt;! Great news - new file upload has just been released!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if a user is logged in and she hasn’t seen the new upload yet - the following script will be loaded to the page:
(I assume jQuery is available)&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).append(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;div class='banner'/&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.banner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).html(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello bart@futuresimple.com! Great news - new file upload has just been released!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Problem solved, time to play some office ping-pong… Not so fast dude.&lt;/p&gt;

&lt;p&gt;As it happens omg-app.com is super popular and many people are logged in at all times. Authentication information for omg-app is
being kept in browsers’ cookie. What is the problem?&lt;/p&gt;

&lt;p&gt;Lets assume that my good pal Mike is logged in. At the same time he clicked on a link which leads to the site with funny cats
(what a lovely site it is …) in other tab of his browser.  Not only is the kitten site unbearably cute, it is also a malicious site which
loads exactly the same script as omg-app.com:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;text/javascript&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://omg-app.com/banner.js&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Mike is logged in to omg-app and the authentication cookie is present - the kitten site gets the same response - meaning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Hello bart@futuresimple.com - new file upload was just released".
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all the attacker needs to do is read the content of the div with the class “banner”. Boom - email stolen.&lt;/p&gt;

&lt;p&gt;How can it be fixed then?&lt;/p&gt;

&lt;p&gt;My first idea was to verify if a script was loaded from omg-app.com domain on the server-side:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;banner&lt;/span&gt;
   &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;unless&lt;/span&gt; request.referrer.match( &lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;^http:&lt;/span&gt;&lt;span class="char"&gt;\/&lt;/span&gt;&lt;span class="char"&gt;\/&lt;/span&gt;&lt;span class="content"&gt;omg-app.com&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;)
   ...
&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solution isn’t really good for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
    &lt;p&gt;in Rails specifically you can’t always get the request referrer of the page where script was loaded. This applies to requests coming from the script tag.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if the user has a plugin which blocks the referrer from being sent, your app will never get the referrer url&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;How about adding a check to the code returned by the banner app to verify the location and only then embedding the html.&lt;/p&gt;

&lt;p&gt;Seems like a great idea … Now the code responsible for the banner would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
 &lt;span class="keyword"&gt;var&lt;/span&gt; regex = &lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;\.&lt;/span&gt;&lt;span class="content"&gt;omg-app&lt;/span&gt;&lt;span class="content"&gt;\.&lt;/span&gt;&lt;span class="content"&gt;com$&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;if&lt;/span&gt; (regex.test(window.location.host)) {
    &lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).append(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;div class='banner'/&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.banner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).html(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello  bart@futuresimple.com!  Great news - new file upload has just been released!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We wrap the code in a function to make the regex a private variable.&lt;/p&gt;

&lt;p&gt;Bad news - this is not safe at all.&lt;/p&gt;

&lt;p&gt;Even if the malicious site would include the whole code above, RegExp.prototype.test method can be easily overwitten (welcome to JS world…) to always return true.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;RegExp.prototype.&lt;span class="function"&gt;test&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() { &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this tiny bit of code, the condition will be always true and we’re back to the initial problem.&lt;/p&gt;

&lt;p&gt;Ok - so now I can pull out the big guns and include the banner information in iframe on each page. This starts to be really complicated and I’m not a big fan of iframes.&lt;/p&gt;

&lt;p&gt;The solution I decided to go for is to load the banner after getting its content via an AJAX request.&lt;/p&gt;

&lt;p&gt;My Rails action looks sth like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BannerController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;show&lt;/span&gt;
    respond_to &lt;span class="keyword"&gt;do&lt;/span&gt; |format|
      &lt;span class="keyword"&gt;if&lt;/span&gt; current_user.saw_new_upload?
        format.json {
          render &lt;span class="symbol"&gt;:json&lt;/span&gt; =&amp;gt; {&lt;span class="symbol"&gt;:message&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Hello &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;current_user.email&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; - new file upload was just released&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;  } }
      &lt;span class="keyword"&gt;else&lt;/span&gt;
        format.json { render &lt;span class="symbol"&gt;:json&lt;/span&gt; =&amp;gt; {} }
      &lt;span class="keyword"&gt;end&lt;/span&gt;
      &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in omg-app, I simply implement a client to pick up this information.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;var&lt;/span&gt; methods = {
    &lt;span class="function"&gt;display_html&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(message) {
      &lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).append(&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;div class='banner'/&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;));
      &lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.banner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).append(message);
    }
  }
  &lt;span class="predefined"&gt;$&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/banner.json&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(data) {
    display_html(data.message)
  })
}());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is this solution safe? (is it?!)
Because of &lt;a href="http://en.wikipedia.org/wiki/Same_origin_policy"&gt;same origin policy&lt;/a&gt;. In nutshell - only scripts (e.x. ajax requests) originating from the same site (omg-app.com) can access banner action in your web app.&lt;/p&gt;

&lt;p&gt;That means that browser blocks any ajax requests originated on kitty site to access your application hence CSRF attack described earlier is not a problem any more.&lt;/p&gt;

&lt;p&gt;So far so good. There surely are some pitfalls (e.g. subdomains) of this approach, but that’s the best one I came up with so far.
If you have any suggestions, share them in the comments!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Most of you are aware of the &lt;a href="http://pl.wikipedia.org/wiki/Cross-site_request_forgery"&gt;CSRF attack&lt;/a&gt;. I use JS on a daily basis but I actually never thought that the code I develop could be CSRF-prone.&lt;/p&gt;

&lt;p&gt;You saw that coming -  I was wrong and I want to share that harsh lesson.&lt;/p&gt;

&lt;p&gt;Let’s assume you’re developing a web app called omg-app.com (obviously because it’s so good it will make everyone say OMG!). The app is getting bigger, lots of people use it, new features are being added on a weekly basis. At some point you conclude it would be nice to inform users about some recently added features.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:futuresimple.github.com,2012-02-29:/posts/2012-02-29-reinventing-tools-for-developers-lets-start-with-unix-terminal/</id>
    <title type="html">Reinventing tools for developers, let's start with unix terminal</title>
    <published>2012-02-29T17:00:00Z</published>
    <updated>2012-02-29T17:00:00Z</updated>
    <link rel="alternate" href="http://futuresimple.github.com/posts/2012-02-29-reinventing-tools-for-developers-lets-start-with-unix-terminal/"/>
    <content type="html">&lt;p&gt;A big chunk of our day-to-day work concentrates around unix terminal. We all know the usual flow, opening our loved text editors, running scripts, consoles, profilers, running tests, ack’ing, logging into servers, shipping code to production etc. Actually if I were about to pick the most important development tool (except for the programming language), I would have a hard time choosing between a text editor and the terminal.&lt;/p&gt;



&lt;p&gt;I feel that working with the terminal is not really that efficient. We do the same stuff over and over again; we repeat ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-shell"&gt;$ cd;
$ cd ~/;
$ git status;
$ rm -rf / (just kidding);
$ vim;
$ mate .;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and so on - every single day.&lt;/p&gt;

&lt;p&gt;We write code in text editors but when we want to do something else we need to switch context to terminal - how much time is wasted on continuous context change and ‘miss clicking’ terminal / text editor / other icons?&lt;/p&gt;

&lt;p&gt;We operate on data in plain text mode - not a friendly nor quick way of visualizing data.&lt;/p&gt;

&lt;p&gt;Finally, there is no easy way to edit text that we enter in the terminal. Going to the end/beginning of the line depending which place it’s closer to the point you want to edit, and then moving your cursor over one character at a time to get to the destination - sounds familiar? I was so frustrated with that, that I made it a habit to enter all the commands in text editor then copy &amp;amp; paste to the terminal window!&lt;/p&gt;

&lt;p&gt;Recently, I realized that the terminal that we all use to build the most sophisticated products, cutting edge technologies (AWS, Facebook, Google, even Airplanes) was invented a long time ago. Is it already 20 years old, or even more? How crazy is that?&lt;/p&gt;

&lt;p&gt;Since then so many things changed in our world, we learned so much in the context of human computer interaction, we came up with user experience, we design easy, simple products (iPhone, and recently the Windows Phone popped out, which seems to be amazingly designed), yet the terminal remained the same. How productive and effective could we be if the terminal was also up to date?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No more ranting! What can be done about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think that there are some key assumptions that terminal needs to meet in present times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
    &lt;p&gt;Intelligent automation - no more repetition;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Seamless integration into working environment - no need for a context switch;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Friendly way to visualize data;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ease of text edition;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I believe that this will change our lives - for better obviously!&lt;/p&gt;

&lt;p&gt;I played around for a while with Automator on Mac and managed to bring shell &amp;amp; programming languages runtimes to a text editor. You can find the output of my work -&amp;gt; &lt;a href="http://cziko.github.com/yoke"&gt;http://cziko.github.com/yoke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s neat; you simply can use all shell commands and for instance ruby in a text editor. You need to install both extensions (ruby and a shell one) and hot key both of them. Then you just select text in you editor of choice, press adequate shortcut and magic happens. Recently I even managed to make it stateful - meaning that there is a shared memory in between the commands execution. That can be used to store e.g. a current working directory. I use it on a daily basis, especially for testing parts of my ruby code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope more people will identify the terminal problem. Maybe some good designers will pick it up too and we can kill it 2gether!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Related interesting stuff:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="http://lubutu.com/idea/ivo"&gt;Ivo - Terminal, reimagined&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
&lt;a href="https://github.com/unconed/TermKit"&gt;TermKit&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
&lt;a href="http://vimeo.com/36579366"&gt;Bret Victor - Inventing on Principle&lt;/a&gt; /thanks czzarr; &lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you have any questions or you are enthusiastic about the idea feel free to drop a comment below!&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;A big chunk of our day-to-day work concentrates around unix terminal. We all know the usual flow, opening our loved text editors, running scripts, consoles, profilers, running tests, ack’ing, logging into servers, shipping code to production etc. Actually if I were about to pick the most important development tool (except for the programming language), I would have a hard time choosing between a text editor and the terminal.&lt;/p&gt;

</summary>
  </entry>
</feed>
